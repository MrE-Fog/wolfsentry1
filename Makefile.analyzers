# Makefile
#
# Copyright (C) 2021-2022 wolfSSL Inc.
#
# This file is part of wolfSentry.
#
# wolfSentry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# wolfSentry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA

ifeq "$(V)" "1"
     QUIET_FLAG:=
else
     QUIET_FLAG:=--quiet
endif

# lock in the expected major versions of LLVM/clang/compiler-rt-sanitizers, in
# order of preference:
ifndef CLANG_PATH
	CLANG_PATH:=/usr/lib/llvm/15/bin:/usr/lib/llvm-15:/usr/lib/llvm/14/bin:/usr/lib/llvm-14:/usr/lib/llvm/13/bin:/usr/lib/llvm-13:/usr/bin
endif

valgrind-all-clang: PATH:=$(CLANG_PATH):$(PATH)
sanitize-all-clang: PATH:=$(CLANG_PATH):$(PATH)
sanitize-all-clang-macosx: PATH:=$(CLANG_PATH):$(PATH)
c99-test-clang: PATH:=$(CLANG_PATH):$(PATH)

.PHONY: clang-version-test
clang-version-test:
	@PATH=$(CLANG_PATH) clang --version >/dev/null || { echo 'CLANG_PATH $(CLANG_PATH) is invalid.' >&2; exit 1; }

.PHONY: valgrind
valgrind: CFLAGS+=-fno-omit-frame-pointer
valgrind: LDFLAGS+=-fno-omit-frame-pointer
valgrind: VALGRIND=valgrind --tool=memcheck --leak-check=full --error-exitcode=10 $(VALGRIND_ARGS)
valgrind: test

.PHONY: valgrind-drd
valgrind-drd: CFLAGS+=-fno-omit-frame-pointer
valgrind-drd: LDFLAGS+=-fno-omit-frame-pointer
valgrind-drd: VALGRIND=valgrind --tool=drd --error-exitcode=10 $(VALGRIND_ARGS)
valgrind-drd: test

.PHONY: valgrind-helgrind
valgrind-helgrind: CFLAGS+=-fno-omit-frame-pointer
valgrind-helgrind: LDFLAGS+=-fno-omit-frame-pointer
valgrind-helgrind: VALGRIND=valgrind --tool=helgrind --error-exitcode=10 $(VALGRIND_ARGS)
valgrind-helgrind: test

.PHONY: valgrind-all
valgrind-all:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) -f $(THIS_MAKEFILE) BUILD_TOP=valgrind-builds clean
	@echo "valgrind memcheck"
	@echo "================="
	@$(MAKE) $(EXTRA_MAKE_FLAGS) -f $(THIS_MAKEFILE) BUILD_TOP=valgrind-builds VALGRIND_ARGS=-q valgrind
	@echo
	@echo "valgrind drd"
	@echo "============"
	@$(MAKE) $(EXTRA_MAKE_FLAGS) -f $(THIS_MAKEFILE) BUILD_TOP=valgrind-builds VALGRIND_ARGS=-q valgrind-drd
	@echo
	@echo "valgrind helgrind"
	@echo "================="
	@$(MAKE) $(EXTRA_MAKE_FLAGS) -f $(THIS_MAKEFILE) BUILD_TOP=valgrind-builds VALGRIND_ARGS=-q valgrind-helgrind
	@echo
	@echo "valgrind found no defects."
	@$(MAKE) $(EXTRA_MAKE_FLAGS) -f $(THIS_MAKEFILE) BUILD_TOP=valgrind-builds clean

.PHONY: sanitize
sanitize: CFLAGS+=-fno-omit-frame-pointer -fsanitize=address -fsanitize=pointer-subtract -fsanitize=leak -fsanitize=undefined -fsanitize=float-cast-overflow -fsanitize=float-divide-by-zero
sanitize: LDFLAGS+=-fno-omit-frame-pointer -fsanitize=address -fsanitize=pointer-subtract -fsanitize=leak -fsanitize=undefined -fsanitize=float-cast-overflow -fsanitize=float-divide-by-zero

ifeq "$(CC_IS_GCC)" "1"
sanitize: CFLAGS+=-fsanitize=bounds-strict
sanitize: LDFLAGS+=-fsanitize=bounds-strict
endif

sanitize: TEST_ENV+=ASAN_OPTIONS='detect_invalid_pointer_pairs=2:halt_on_error=1:detect_stack_use_after_return=1' UBSAN_OPTIONS='halt_on_error=1' LSAN_OPTIONS='halt_on_error=1:exitcode=23'
sanitize: test

.PHONY: sanitize-no-leak
sanitize-no-leak: CFLAGS+=-fno-omit-frame-pointer -fsanitize=address -fsanitize=pointer-subtract -fsanitize=undefined -fsanitize=float-cast-overflow -fsanitize=float-divide-by-zero
sanitize-no-leak: LDFLAGS+=-fno-omit-frame-pointer -fsanitize=address -fsanitize=pointer-subtract -fsanitize=undefined -fsanitize=float-cast-overflow -fsanitize=float-divide-by-zero

ifeq "$(CC_IS_GCC)" "1"
sanitize-no-leak: CFLAGS+=-fsanitize=bounds-strict
sanitize-no-leak: LDFLAGS+=-fsanitize=bounds-strict
endif

sanitize-no-leak: TEST_ENV+=ASAN_OPTIONS='detect_invalid_pointer_pairs=2:halt_on_error=1:detect_stack_use_after_return=1' UBSAN_OPTIONS='halt_on_error=1'
sanitize-no-leak: test

.PHONY: sanitize-thread
sanitize-thread: CFLAGS+=-fsanitize=thread -DWOLFSENTRY_LOCK_ERROR_CHECKING -DWOLFSENTRY_LOCK_DEBUGGING
sanitize-thread: LDFLAGS+=-fsanitize=thread
sanitize-thread: TEST_ENV+=ASAN_OPTIONS='halt_on_error=1'
sanitize-thread: test

.PHONY: sanitize-all
sanitize-all:
ifeq "$(CC_IS_GCC)" "1"
	@echo "sanitize address, leak, undefined, float-cast-overflow, float-divide-by-zero, and bounds-strict"
	@echo "==============================================================================================="
else
	@echo "sanitize address, leak, undefined, float-cast-overflow, and float-divide-by-zero"
	@echo "================================================================================"
endif
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) BUILD_TOP=sanitizer-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) BUILD_TOP=sanitizer-builds EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize
	@echo
	@echo "sanitize thread"
	@echo "==============="
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) BUILD_TOP=sanitizer-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) BUILD_TOP=sanitizer-builds EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize-thread
	@echo
	@echo "sanitizers found no defects."
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) BUILD_TOP=sanitizer-builds clean


.PHONY: valgrind-all-gcc
valgrind-all-gcc:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-gcc-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-gcc-builds CC=$(GCC) VALGRIND_ARGS=-q valgrind
	@echo "no defects from gcc valgrind memcheck"
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-gcc-builds CC=$(GCC) VALGRIND_ARGS=-q valgrind-drd
	@echo "no defects from gcc valgrind drd"
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-gcc-builds CC=$(GCC) VALGRIND_ARGS=-q valgrind-helgrind
	@echo "no defects from gcc valgrind helgrind"
	@echo "gcc valgrind found no defects."
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-gcc-builds clean

.PHONY: valgrind-all-clang
valgrind-all-clang: clang-version-test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-clang-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-clang-builds CC=$(CLANG) VALGRIND_ARGS=-q valgrind
	@echo "no defects from clang valgrind memcheck"
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-clang-builds CC=$(CLANG) VALGRIND_ARGS=-q valgrind-drd
	@echo "no defects from clang valgrind drd"
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-clang-builds CC=$(CLANG) VALGRIND_ARGS=-q valgrind-helgrind
	@echo "no defects from clang valgrind helgrind"
	@echo "clang valgrind found no defects."
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=valgrind-clang-builds clean

.PHONY: sanitize-all-gcc
sanitize-all-gcc:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-gcc clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-gcc CC=$(GCC) EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize
	@echo "no defects from gcc sanitize address, leak, undefined, float-cast-overflow, float-divide-by-zero, and bounds-strict"
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-gcc clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-gcc CC=$(GCC) EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize-thread
	@echo "no defects from gcc sanitize thread"
	@echo "gcc sanitizers found no defects."
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-gcc clean

.PHONY: sanitize-all-clang
sanitize-all-clang: clang-version-test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang CC=$(CLANG) EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize
	@echo "no defects from clang sanitize address, leak, undefined, float-cast-overflow, and float-divide-by-zero"
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang CC=$(CLANG) EXTRA_CFLAGS+="-fno-sanitize-recover=all -D__SANITIZE_THREAD__" sanitize-thread
	@echo "no defects from clang sanitize thread"
	@echo "clang sanitizers found no defects."
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang clean

.PHONY: sanitize-all-clang-macosx
sanitize-all-clang-macosx: clang-version-test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang CC=$(CLANG) EXTRA_CFLAGS+="-fno-sanitize-recover=all" sanitize-no-leak
	@echo "no defects from clang sanitize address, undefined, float-cast-overflow, and float-divide-by-zero"
	@echo "clang sanitizers found no defects."
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=sanitizer-builds-clang clean

.PHONY: analyze-all
# valgrind-all-clang disabled until the valgrind team fixes https://bugs.kde.org/show_bug.cgi?id=452758
# "Valgrind does not read properly DWARF5 as generated by Clang14"
analyze-all: valgrind-all-gcc sanitize-all-gcc sanitize-all-clang
	@echo "analyzers found no defects."

.PHONY: analyze-macosx
analyze-macosx: sanitize-all-clang-macosx
	@echo "sanitizers found no defects."

.PHONY: c99-test-gcc
c99-test-gcc:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds EXTRA_CFLAGS+='-std=c99 -pedantic'
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds EXTRA_CFLAGS+='-std=c99 -pedantic' SINGLETHREADED=1
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=gcc-c99-builds clean
	@echo "gcc std=c99 library build tests passed."

.PHONY: c99-test-clang
c99-test-clang: clang-version-test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=clang-c99-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=clang-c99-builds CC=$(CLANG) EXTRA_CFLAGS+='-std=c99 -pedantic'
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=clang-c99-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=clang-c99-builds CC=$(CLANG) EXTRA_CFLAGS+='-std=c99 -pedantic' SINGLETHREADED=1
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=clang-c99-builds clean
	@echo "clang std=c99 library build tests passed."

.PHONY: m32-test
m32-test:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=m32-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=m32-builds EXTRA_CFLAGS+=-m32 EXTRA_LDFLAGS+=-m32 test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=m32-builds clean
	@echo "-m32 test passed."

.PHONY: singlethreaded-test
singlethreaded-test:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=singlethreaded-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=singlethreaded-builds SINGLETHREADED=1 test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=singlethreaded-builds clean
	@echo "SINGLETHREADED test passed."

.PHONY: no-json-test
no-json-test:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=NO_JSON-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=NO_JSON-builds NO_JSON=1 test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=NO_JSON-builds clean
	@echo "NO_JSON test passed."

.PHONY: no-json-dom-test
no-json-dom-test:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=NO_JSON_DOM-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=NO_JSON_DOM-builds NO_JSON_DOM=1 test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=NO_JSON_DOM-builds clean
	@echo "NO_JSON_DOM test passed."

.PHONY: no-error-strings-test
no-error-strings-test:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=no-error-strings-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=no-error-strings-builds EXTRA_CFLAGS+='-DWOLFSENTRY_NO_ERROR_STRINGS' test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=no-error-strings-builds clean
	@echo "no-error-strings build test passed."

.PHONY: no-protocol-names-test
no-protocol-names-test:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=no-protocol-names-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=no-protocol-names-builds EXTRA_CFLAGS+='-DWOLFSENTRY_NO_PROTOCOL_NAMES' test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=no-protocol-names-builds clean
	@echo "no-protocol-names build test passed."

.PHONY: no-stdio-build-test
no-stdio-test:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=no_stdio-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=no_stdio-builds NO_STDIO=1
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=no_stdio-builds clean
	@echo "NO_STDIO build test passed."

.PHONY: minimal-build-test
minimal-build-test:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=minimal-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=minimal-builds SINGLETHREADED=1 NO_STDIO=1 DEBUG= OPTIM=-Os EXTRA_CFLAGS='-DWOLFSENTRY_NO_CLOCK_BUILTIN -DWOLFSENTRY_NO_MALLOC_BUILTIN -DWOLFSENTRY_NO_ERROR_STRINGS -DWOLFSENTRY_NO_PROTOCOL_NAMES -Wno-error=inline -Wno-inline'
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=minimal-builds clean
	@echo "minimal build test passed."

.PHONY: dynamic-build-test
dynamic-build-test:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=dynamic-build-test clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=dynamic-build-test $(addprefix $(BUILD_TOP)/dynamic-build-test/tests/,$(UNITTEST_LIST_SHARED))
	@for test in $(UNITTEST_LIST_SHARED); do LD_LIBRARY_PATH=$(BUILD_TOP) $(TEST_ENV) $(VALGRIND) "$(BUILD_TOP)/dynamic-build-test/tests/$$test" >/dev/null || exit $?; done
	@echo '$(UNITTEST_LIST_SHARED) passed.'
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=dynamic-build-test clean

.PHONY: lock-error-checking-test
lock-error-checking-test:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=lock-error-checking-builds clean
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=lock-error-checking-builds EXTRA_CFLAGS+='-DWOLFSENTRY_LOCK_ERROR_CHECKING' test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 BUILD_TOP=lock-error-checking-builds clean
	@echo "lock-error-checking test passed."


.PHONY: dist-check
dist-check:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 dist-test
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) VERY_QUIET=1 dist-test-clean
	@echo $@ 'passed.'

.PHONY: check-common
check-common: dynamic-build-test c99-test-gcc c99-test-clang singlethreaded-test no-json-test no-json-dom-test no-error-strings-test no-protocol-names-test no-stdio-test minimal-build-test

.PHONY: check
check: analyze-all check-common m32-test dist-check lock-error-checking-test
	@echo "all checks passed."

.PHONY: check-macosx
check-macosx: analyze-macosx check-common
	@echo "all checks passed."

# recipe to run the pre-push hook on the commit head, without actually pushing:
.PHONY: pre-push-check
pre-push-check:
	@cd $(BUILD_TOP) && git log -1 --format='format:%S %H%n' | $(SRC_TOP)/scripts/pre-push.sh

ANALYZER_BUILD_ARTIFACTS+=$(BUILD_TOP)/tests/coverage-unittest.o $(BUILD_TOP)/tests/unittests.d $(BUILD_TOP)/tests/coverage-unittest.gcno $(BUILD_TOP)/tests/coverage-unittest.gcda $(BUILD_TOP)/tests/coverage-unittest $(BUILD_TOP)/*.gcov

.PHONY: coverage
coverage: OPTIM=-O0
coverage:
	@mkdir -p coverage-build && cd coverage-build && $(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f ../$(THIS_MAKEFILE) SRC_TOP=.. EXTRA_CFLAGS+='--coverage -DBUILDING_LIBWOLFSENTRY' EXTRA_LDFLAGS+=--coverage ./tests/coverage-unittest
	@cd coverage-build && ./tests/coverage-unittest >/dev/null && echo 'omnibus unittest passed.'
	@cd coverage-build && gcov --relative-only src/*.o src/json/*.o tests/coverage-unittest $(GCOV_EXTRA_ARGS)

.PHONY: coverage-clean
coverage-clean:
	@$(MAKE) $(EXTRA_MAKE_FLAGS) $(QUIET_FLAG) -f $(THIS_MAKEFILE) BUILD_TOP=coverage-build clean
	@[ -d coverage-build ] && echo "artifacts remain in ./coverage-build/" || echo "cleaned coverage-build"

$(BUILD_TOP)/tests/coverage-unittest: $(BUILD_TOP)/tests/coverage-unittest.o $(BUILD_TOP)/$(LIB_NAME)
ifeq "$(V)" "1"
	$(CC) $(LDFLAGS) -o $@ $+
else
ifndef VERY_QUIET
	@echo "$(CC) ... -o $@"
endif
	@$(CC) $(LDFLAGS) -o $@ $+
endif

$(BUILD_TOP)/tests/coverage-unittest.o: override CFLAGS+=$(addprefix -D,$(shell echo '$(UNITTEST_LIST)' | tr '[:lower:]' '[:upper:]'))
$(BUILD_TOP)/tests/coverage-unittest.o: override CFLAGS+=$(TEST_JSON_CFLAGS)
$(BUILD_TOP)/tests/coverage-unittest.o: $(SRC_TOP)/tests/unittests.c
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	@rm -f $(@:.o=.gcda)
ifeq "$(V)" "1"
	$(CC) $(CFLAGS) -MF $(<:.c=.d) -c $< -o $@
else
ifndef VERY_QUIET
	@echo "$(CC) ... -o $@"
endif
	@$(CC) $(CFLAGS) -MF $(<:.c=.d) -c $< -o $@
endif

.PHONY: gcovr
gcovr: GCOV_EXTRA_ARGS = 1>/dev/null
gcovr: coverage
	@gcovr -r $(shell realpath $(SRC_TOP)) -g -k -e src/json/centijson_sax.c coverage-build/
